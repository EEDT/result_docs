Index.PACKAGES = {"com" : [], "com.frank" : [], "com.frank.result" : [{"name" : "com.frank.result.Err", "shortDescription" : "", "members_case class" : [{"label" : "iterator", "tail" : "(): Iterator[E]", "member" : "com.frank.result.Err.iterator", "link" : "com\/frank\/result\/Err.html#iterator():Iterator[E]", "kind" : "def"}, {"label" : "flatten", "tail" : "(f: (E) => IterableOnce[E]): Seq[E]", "member" : "com.frank.result.Err.flatten", "link" : "com\/frank\/result\/Err.html#flatten(implicitf:E=>IterableOnce[E]):Seq[E]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[E]", "member" : "com.frank.result.Err.toSeq", "link" : "com\/frank\/result\/Err.html#toSeq:Seq[E]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (E) => IterableOnce[E]): Seq[TypeOf]", "member" : "com.frank.result.Err.flatMap", "link" : "com\/frank\/result\/Err.html#flatMap[U](f:E=>IterableOnce[E]):Seq[Err.this.TypeOf]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (E) => Unit): Unit", "member" : "com.frank.result.Err.foreach", "link" : "com\/frank\/result\/Err.html#foreach(f:E=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (E) => Boolean): Boolean", "member" : "com.frank.result.Err.exists", "link" : "com\/frank\/result\/Err.html#exists(f:E=>Boolean):Boolean", "kind" : "def"}, {"label" : "map", "tail" : "(f: (E) => U): M[U]", "member" : "com.frank.result.Err.map", "link" : "com\/frank\/result\/Err.html#map[U](f:E=>U):Err.this.M[U]", "kind" : "def"}, {"label" : "M", "tail" : "", "member" : "com.frank.result.Err.M", "link" : "com\/frank\/result\/Err.html#M[B]=com.frank.result.Result[Err.this.TypeOf,B]", "kind" : "type"}, {"label" : "TypeOf", "tail" : "", "member" : "com.frank.result.Err.TypeOf", "link" : "com\/frank\/result\/Err.html#TypeOf=E", "kind" : "type"}, {"member" : "com.frank.result.Err#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": E", "member" : "com.frank.result.Err.x", "link" : "com\/frank\/result\/Err.html#x:E", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/frank\/result\/Err.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "creatUnitValue", "tail" : "(): Unit", "member" : "com.frank.result.Result.creatUnitValue", "link" : "com\/frank\/result\/Err.html#creatUnitValue():Unit", "kind" : "def"}, {"label" : "orElse", "tail" : "(func: (E) => Result[T, E]): Result[T, E]", "member" : "com.frank.result.Result.orElse", "link" : "com\/frank\/result\/Err.html#orElse(func:E=>com.frank.result.Result[T,E]):com.frank.result.Result[T,E]", "kind" : "def"}, {"label" : "or", "tail" : "(result: Result[T, E]): Result[T, E]", "member" : "com.frank.result.Result.or", "link" : "com\/frank\/result\/Err.html#or(result:com.frank.result.Result[T,E]):com.frank.result.Result[T,E]", "kind" : "def"}, {"label" : "mapOrElse", "tail" : "(f: (T) => U, default: (E) => U): Result[U, U]", "member" : "com.frank.result.Result.mapOrElse", "link" : "com\/frank\/result\/Err.html#mapOrElse[U](f:T=>U,default:E=>U):com.frank.result.Result[U,U]", "kind" : "def"}, {"label" : "ok", "tail" : "(): Option[T]", "member" : "com.frank.result.Result.ok", "link" : "com\/frank\/result\/Err.html#ok:Option[T]", "kind" : "def"}, {"label" : "okOrElse", "tail" : "(elseValue: T): T", "member" : "com.frank.result.Result.okOrElse", "link" : "com\/frank\/result\/Err.html#okOrElse(elseValue:T):T", "kind" : "def"}, {"label" : "unwrapOrElse", "tail" : "(e: (E) => T): T", "member" : "com.frank.result.Result.unwrapOrElse", "link" : "com\/frank\/result\/Err.html#unwrapOrElse(e:E=>T):T", "kind" : "def"}, {"label" : "unwrapOrDefault", "tail" : "(default: T): T", "member" : "com.frank.result.Result.unwrapOrDefault", "link" : "com\/frank\/result\/Err.html#unwrapOrDefault(default:T):T", "kind" : "def"}, {"label" : "unwrapErr", "tail" : "(): E", "member" : "com.frank.result.Result.unwrapErr", "link" : "com\/frank\/result\/Err.html#unwrapErr:E", "kind" : "def"}, {"label" : "unwrap", "tail" : "(): T", "member" : "com.frank.result.Result.unwrap", "link" : "com\/frank\/result\/Err.html#unwrap:T", "kind" : "def"}, {"label" : "exceptionErr", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exceptionErr", "link" : "com\/frank\/result\/Err.html#exceptionErr(msg:String):Unit", "kind" : "def"}, {"label" : "exception", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exception", "link" : "com\/frank\/result\/Err.html#exception(msg:String):Unit", "kind" : "def"}, {"label" : "err", "tail" : "(): Option[E]", "member" : "com.frank.result.Result.err", "link" : "com\/frank\/result\/Err.html#err:Option[E]", "kind" : "def"}, {"label" : "isErr", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isErr", "link" : "com\/frank\/result\/Err.html#isErr:Boolean", "kind" : "def"}, {"label" : "containsErr", "tail" : "(x: E): Boolean", "member" : "com.frank.result.Result.containsErr", "link" : "com\/frank\/result\/Err.html#containsErr(x:E):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(x: T): Boolean", "member" : "com.frank.result.Result.contains", "link" : "com\/frank\/result\/Err.html#contains(x:T):Boolean", "kind" : "def"}, {"label" : "isOK", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isOK", "link" : "com\/frank\/result\/Err.html#isOK:Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/frank\/result\/Err.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/frank\/result\/Err.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/frank\/result\/Err.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/frank\/result\/Err.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/frank\/result\/Err.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/frank\/result\/Err.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/frank\/result\/Err.html", "kind" : "case class"}, {"name" : "com.frank.result.Ok", "shortDescription" : "", "members_case class" : [{"label" : "iterator", "tail" : "(): Iterator[T]", "member" : "com.frank.result.Ok.iterator", "link" : "com\/frank\/result\/Ok.html#iterator():Iterator[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(f: (T) => IterableOnce[T]): Seq[T]", "member" : "com.frank.result.Ok.flatten", "link" : "com\/frank\/result\/Ok.html#flatten(implicitf:T=>IterableOnce[T]):Seq[T]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[T]", "member" : "com.frank.result.Ok.toSeq", "link" : "com\/frank\/result\/Ok.html#toSeq:Seq[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => IterableOnce[T]): Seq[TypeOf]", "member" : "com.frank.result.Ok.flatMap", "link" : "com\/frank\/result\/Ok.html#flatMap[U](f:T=>IterableOnce[T]):Seq[Ok.this.TypeOf]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) => Unit): Unit", "member" : "com.frank.result.Ok.foreach", "link" : "com\/frank\/result\/Ok.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (T) => Boolean): Boolean", "member" : "com.frank.result.Ok.exists", "link" : "com\/frank\/result\/Ok.html#exists(f:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) => U): M[U]", "member" : "com.frank.result.Ok.map", "link" : "com\/frank\/result\/Ok.html#map[U](f:T=>U):Ok.this.M[U]", "kind" : "def"}, {"label" : "M", "tail" : "", "member" : "com.frank.result.Ok.M", "link" : "com\/frank\/result\/Ok.html#M[B]=com.frank.result.Result[B,Ok.this.TypeOf]", "kind" : "type"}, {"label" : "TypeOf", "tail" : "", "member" : "com.frank.result.Ok.TypeOf", "link" : "com\/frank\/result\/Ok.html#TypeOf=T", "kind" : "type"}, {"member" : "com.frank.result.Ok#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": T", "member" : "com.frank.result.Ok.x", "link" : "com\/frank\/result\/Ok.html#x:T", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/frank\/result\/Ok.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "creatUnitValue", "tail" : "(): Unit", "member" : "com.frank.result.Result.creatUnitValue", "link" : "com\/frank\/result\/Ok.html#creatUnitValue():Unit", "kind" : "def"}, {"label" : "orElse", "tail" : "(func: (E) => Result[T, E]): Result[T, E]", "member" : "com.frank.result.Result.orElse", "link" : "com\/frank\/result\/Ok.html#orElse(func:E=>com.frank.result.Result[T,E]):com.frank.result.Result[T,E]", "kind" : "def"}, {"label" : "or", "tail" : "(result: Result[T, E]): Result[T, E]", "member" : "com.frank.result.Result.or", "link" : "com\/frank\/result\/Ok.html#or(result:com.frank.result.Result[T,E]):com.frank.result.Result[T,E]", "kind" : "def"}, {"label" : "mapOrElse", "tail" : "(f: (T) => U, default: (E) => U): Result[U, U]", "member" : "com.frank.result.Result.mapOrElse", "link" : "com\/frank\/result\/Ok.html#mapOrElse[U](f:T=>U,default:E=>U):com.frank.result.Result[U,U]", "kind" : "def"}, {"label" : "ok", "tail" : "(): Option[T]", "member" : "com.frank.result.Result.ok", "link" : "com\/frank\/result\/Ok.html#ok:Option[T]", "kind" : "def"}, {"label" : "okOrElse", "tail" : "(elseValue: T): T", "member" : "com.frank.result.Result.okOrElse", "link" : "com\/frank\/result\/Ok.html#okOrElse(elseValue:T):T", "kind" : "def"}, {"label" : "unwrapOrElse", "tail" : "(e: (E) => T): T", "member" : "com.frank.result.Result.unwrapOrElse", "link" : "com\/frank\/result\/Ok.html#unwrapOrElse(e:E=>T):T", "kind" : "def"}, {"label" : "unwrapOrDefault", "tail" : "(default: T): T", "member" : "com.frank.result.Result.unwrapOrDefault", "link" : "com\/frank\/result\/Ok.html#unwrapOrDefault(default:T):T", "kind" : "def"}, {"label" : "unwrapErr", "tail" : "(): E", "member" : "com.frank.result.Result.unwrapErr", "link" : "com\/frank\/result\/Ok.html#unwrapErr:E", "kind" : "def"}, {"label" : "unwrap", "tail" : "(): T", "member" : "com.frank.result.Result.unwrap", "link" : "com\/frank\/result\/Ok.html#unwrap:T", "kind" : "def"}, {"label" : "exceptionErr", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exceptionErr", "link" : "com\/frank\/result\/Ok.html#exceptionErr(msg:String):Unit", "kind" : "def"}, {"label" : "exception", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exception", "link" : "com\/frank\/result\/Ok.html#exception(msg:String):Unit", "kind" : "def"}, {"label" : "err", "tail" : "(): Option[E]", "member" : "com.frank.result.Result.err", "link" : "com\/frank\/result\/Ok.html#err:Option[E]", "kind" : "def"}, {"label" : "isErr", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isErr", "link" : "com\/frank\/result\/Ok.html#isErr:Boolean", "kind" : "def"}, {"label" : "containsErr", "tail" : "(x: E): Boolean", "member" : "com.frank.result.Result.containsErr", "link" : "com\/frank\/result\/Ok.html#containsErr(x:E):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(x: T): Boolean", "member" : "com.frank.result.Result.contains", "link" : "com\/frank\/result\/Ok.html#contains(x:T):Boolean", "kind" : "def"}, {"label" : "isOK", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isOK", "link" : "com\/frank\/result\/Ok.html#isOK:Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/frank\/result\/Ok.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/frank\/result\/Ok.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/frank\/result\/Ok.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/frank\/result\/Ok.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/frank\/result\/Ok.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/frank\/result\/Ok.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/frank\/result\/Ok.html", "kind" : "case class"}, {"name" : "com.frank.result.Result", "trait" : "com\/frank\/result\/Result.html", "kind" : "trait", "members_trait" : [{"label" : "creatUnitValue", "tail" : "(): Unit", "member" : "com.frank.result.Result.creatUnitValue", "link" : "com\/frank\/result\/Result.html#creatUnitValue():Unit", "kind" : "def"}, {"label" : "orElse", "tail" : "(func: (E) => Result[T, E]): Result[T, E]", "member" : "com.frank.result.Result.orElse", "link" : "com\/frank\/result\/Result.html#orElse(func:E=>com.frank.result.Result[T,E]):com.frank.result.Result[T,E]", "kind" : "def"}, {"label" : "or", "tail" : "(result: Result[T, E]): Result[T, E]", "member" : "com.frank.result.Result.or", "link" : "com\/frank\/result\/Result.html#or(result:com.frank.result.Result[T,E]):com.frank.result.Result[T,E]", "kind" : "def"}, {"label" : "mapOrElse", "tail" : "(f: (T) => U, default: (E) => U): Result[U, U]", "member" : "com.frank.result.Result.mapOrElse", "link" : "com\/frank\/result\/Result.html#mapOrElse[U](f:T=>U,default:E=>U):com.frank.result.Result[U,U]", "kind" : "def"}, {"label" : "ok", "tail" : "(): Option[T]", "member" : "com.frank.result.Result.ok", "link" : "com\/frank\/result\/Result.html#ok:Option[T]", "kind" : "def"}, {"label" : "okOrElse", "tail" : "(elseValue: T): T", "member" : "com.frank.result.Result.okOrElse", "link" : "com\/frank\/result\/Result.html#okOrElse(elseValue:T):T", "kind" : "def"}, {"label" : "unwrapOrElse", "tail" : "(e: (E) => T): T", "member" : "com.frank.result.Result.unwrapOrElse", "link" : "com\/frank\/result\/Result.html#unwrapOrElse(e:E=>T):T", "kind" : "def"}, {"label" : "unwrapOrDefault", "tail" : "(default: T): T", "member" : "com.frank.result.Result.unwrapOrDefault", "link" : "com\/frank\/result\/Result.html#unwrapOrDefault(default:T):T", "kind" : "def"}, {"label" : "unwrapErr", "tail" : "(): E", "member" : "com.frank.result.Result.unwrapErr", "link" : "com\/frank\/result\/Result.html#unwrapErr:E", "kind" : "def"}, {"label" : "unwrap", "tail" : "(): T", "member" : "com.frank.result.Result.unwrap", "link" : "com\/frank\/result\/Result.html#unwrap:T", "kind" : "def"}, {"label" : "exceptionErr", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exceptionErr", "link" : "com\/frank\/result\/Result.html#exceptionErr(msg:String):Unit", "kind" : "def"}, {"label" : "exception", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exception", "link" : "com\/frank\/result\/Result.html#exception(msg:String):Unit", "kind" : "def"}, {"label" : "err", "tail" : "(): Option[E]", "member" : "com.frank.result.Result.err", "link" : "com\/frank\/result\/Result.html#err:Option[E]", "kind" : "def"}, {"label" : "isErr", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isErr", "link" : "com\/frank\/result\/Result.html#isErr:Boolean", "kind" : "def"}, {"label" : "containsErr", "tail" : "(x: E): Boolean", "member" : "com.frank.result.Result.containsErr", "link" : "com\/frank\/result\/Result.html#containsErr(x:E):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(x: T): Boolean", "member" : "com.frank.result.Result.contains", "link" : "com\/frank\/result\/Result.html#contains(x:T):Boolean", "kind" : "def"}, {"label" : "isOK", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isOK", "link" : "com\/frank\/result\/Result.html#isOK:Boolean", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/frank\/result\/Result.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/frank\/result\/Result.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/frank\/result\/Result.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "com\/frank\/result\/Result.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "com\/frank\/result\/Result.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "com\/frank\/result\/Result.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/frank\/result\/Result.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/frank\/result\/Result.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toSeq", "tail" : "(): Seq[TypeOf]", "member" : "com.frank.result.Result.toSeq", "link" : "com\/frank\/result\/Result.html#toSeq:Seq[Result.this.TypeOf]", "kind" : "abstract def"}, {"label" : "foreach", "tail" : "(f: (TypeOf) => Unit): Unit", "member" : "com.frank.result.Result.foreach", "link" : "com\/frank\/result\/Result.html#foreach(f:Result.this.TypeOf=>Unit):Unit", "kind" : "abstract def"}, {"label" : "flatten", "tail" : "(f: (TypeOf) => IterableOnce[TypeOf]): Seq[TypeOf]", "member" : "com.frank.result.Result.flatten", "link" : "com\/frank\/result\/Result.html#flatten(implicitf:Result.this.TypeOf=>IterableOnce[Result.this.TypeOf]):Seq[Result.this.TypeOf]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (TypeOf) => IterableOnce[TypeOf]): Seq[TypeOf]", "member" : "com.frank.result.Result.flatMap", "link" : "com\/frank\/result\/Result.html#flatMap[U](f:Result.this.TypeOf=>IterableOnce[Result.this.TypeOf]):Seq[Result.this.TypeOf]", "kind" : "abstract def"}, {"label" : "exists", "tail" : "(f: (TypeOf) => Boolean): Boolean", "member" : "com.frank.result.Result.exists", "link" : "com\/frank\/result\/Result.html#exists(f:Result.this.TypeOf=>Boolean):Boolean", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (TypeOf) => U): M[U]", "member" : "com.frank.result.Result.map", "link" : "com\/frank\/result\/Result.html#map[U](f:Result.this.TypeOf=>U):Result.this.M[U]", "kind" : "abstract def"}, {"label" : "iterator", "tail" : "(): Iterator[TypeOf]", "member" : "com.frank.result.Result.iterator", "link" : "com\/frank\/result\/Result.html#iterator():Iterator[Result.this.TypeOf]", "kind" : "abstract def"}, {"member" : "com.frank.result.Result.M", "error" : "unsupported entity"}, {"member" : "com.frank.result.Result.TypeOf", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "com\/frank\/result\/Result.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "一个为scala.util.Either提供了更多特性的库"}]};