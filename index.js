Index.PACKAGES = {"com" : [], "com.frank" : [], "com.frank.result" : [{"name" : "com.frank.result.Err", "shortDescription" : "", "members_case class" : [{"label" : "iterator", "tail" : "(): Iterator[E]", "member" : "com.frank.result.Err.iterator", "link" : "com\/frank\/result\/Err.html#iterator():Iterator[E]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[T]", "member" : "com.frank.result.Err.toSeq", "link" : "com\/frank\/result\/Err.html#toSeq:Seq[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) => Unit): Unit", "member" : "com.frank.result.Err.foreach", "link" : "com\/frank\/result\/Err.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (E) => Boolean): Boolean", "member" : "com.frank.result.Err.exists", "link" : "com\/frank\/result\/Err.html#exists(f:E=>Boolean):Boolean", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) => U): Result[U, E]", "member" : "com.frank.result.Err.map", "link" : "com\/frank\/result\/Err.html#map[U](f:T=>U):com.frank.result.Result[U,E]", "kind" : "def"}, {"label" : "TypeOf", "tail" : "", "member" : "com.frank.result.Err.TypeOf", "link" : "com\/frank\/result\/Err.html#TypeOf=E", "kind" : "type"}, {"member" : "com.frank.result.Err#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": E", "member" : "com.frank.result.Err.x", "link" : "com\/frank\/result\/Err.html#x:E", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/frank\/result\/Err.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "toEither", "tail" : "(): Either[E, T]", "member" : "com.frank.result.Result.toEither", "link" : "com\/frank\/result\/Err.html#toEither:scala.util.Either[E,T]", "kind" : "def"}, {"label" : "toTry", "tail" : "(): Try[T]", "member" : "com.frank.result.Result.toTry", "link" : "com\/frank\/result\/Err.html#toTry:scala.util.Try[T]", "kind" : "def"}, {"label" : "creatUnitValue", "tail" : "(): Unit", "member" : "com.frank.result.Result.creatUnitValue", "link" : "com\/frank\/result\/Err.html#creatUnitValue():Unit", "kind" : "def"}, {"label" : "foreachOrElse", "tail" : "(f: (T) => Unit, default: (E) => Unit): Unit", "member" : "com.frank.result.Result.foreachOrElse", "link" : "com\/frank\/result\/Err.html#foreachOrElse(f:T=>Unit,default:E=>Unit):Unit", "kind" : "def"}, {"label" : "orElse", "tail" : "(func: (M2) => Result[M1, M2]): Result[M1, M2]", "member" : "com.frank.result.Result.orElse", "link" : "com\/frank\/result\/Err.html#orElse[M1>:T,M2>:E](func:M2=>com.frank.result.Result[M1,M2]):com.frank.result.Result[M1,M2]", "kind" : "def"}, {"label" : "or", "tail" : "(result: Result[M1, M2]): Result[M1, M2]", "member" : "com.frank.result.Result.or", "link" : "com\/frank\/result\/Err.html#or[M1>:T,M2>:E](result:com.frank.result.Result[M1,M2]):com.frank.result.Result[M1,M2]", "kind" : "def"}, {"label" : "mapOrElse", "tail" : "(f: (T) => U, default: (E) => U): Result[U, U]", "member" : "com.frank.result.Result.mapOrElse", "link" : "com\/frank\/result\/Err.html#mapOrElse[U](f:T=>U,default:E=>U):com.frank.result.Result[U,U]", "kind" : "def"}, {"label" : "flatten", "tail" : "(f: (T) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatten", "link" : "com\/frank\/result\/Err.html#flatten[M>:T](implicitf:T=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "flatMapOrElse", "tail" : "(f: (T) => IterableOnce[M], e: (E) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatMapOrElse", "link" : "com\/frank\/result\/Err.html#flatMapOrElse[M>:T,ME>:E](f:T=>IterableOnce[M],e:E=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatMap", "link" : "com\/frank\/result\/Err.html#flatMap[M>:T,U](f:T=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "mapErr", "tail" : "(f: (E) => U): Result[T, U]", "member" : "com.frank.result.Result.mapErr", "link" : "com\/frank\/result\/Err.html#mapErr[U](f:E=>U):com.frank.result.Result[T,U]", "kind" : "def"}, {"label" : "ok", "tail" : "(): Option[T]", "member" : "com.frank.result.Result.ok", "link" : "com\/frank\/result\/Err.html#ok:Option[T]", "kind" : "def"}, {"label" : "okOrElse", "tail" : "(elseValue: M): M", "member" : "com.frank.result.Result.okOrElse", "link" : "com\/frank\/result\/Err.html#okOrElse[M>:T](elseValue:M):M", "kind" : "def"}, {"label" : "unwrapOrElse", "tail" : "(e: (M2) => M1): M1", "member" : "com.frank.result.Result.unwrapOrElse", "link" : "com\/frank\/result\/Err.html#unwrapOrElse[M1>:T,M2>:E](e:M2=>M1):M1", "kind" : "def"}, {"label" : "unwrapOrDefault", "tail" : "(default: M): M", "member" : "com.frank.result.Result.unwrapOrDefault", "link" : "com\/frank\/result\/Err.html#unwrapOrDefault[M>:T](default:M):M", "kind" : "def"}, {"label" : "unwrapErr", "tail" : "(): E", "member" : "com.frank.result.Result.unwrapErr", "link" : "com\/frank\/result\/Err.html#unwrapErr:E", "kind" : "def"}, {"label" : "unwrap", "tail" : "(): T", "member" : "com.frank.result.Result.unwrap", "link" : "com\/frank\/result\/Err.html#unwrap:T", "kind" : "def"}, {"label" : "exceptionErr", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exceptionErr", "link" : "com\/frank\/result\/Err.html#exceptionErr(msg:String):Unit", "kind" : "def"}, {"label" : "exception", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exception", "link" : "com\/frank\/result\/Err.html#exception(msg:String):Unit", "kind" : "def"}, {"label" : "err", "tail" : "(): Option[E]", "member" : "com.frank.result.Result.err", "link" : "com\/frank\/result\/Err.html#err:Option[E]", "kind" : "def"}, {"label" : "isErr", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isErr", "link" : "com\/frank\/result\/Err.html#isErr:Boolean", "kind" : "def"}, {"label" : "containsErr", "tail" : "(x: M): Boolean", "member" : "com.frank.result.Result.containsErr", "link" : "com\/frank\/result\/Err.html#containsErr[M>:T](x:M):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(i: M): Boolean", "member" : "com.frank.result.Result.contains", "link" : "com\/frank\/result\/Err.html#contains[M>:T](i:M):Boolean", "kind" : "def"}, {"label" : "isOK", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isOK", "link" : "com\/frank\/result\/Err.html#isOK:Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/frank\/result\/Err.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/frank\/result\/Err.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/frank\/result\/Err.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/frank\/result\/Err.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/frank\/result\/Err.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/frank\/result\/Err.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/frank\/result\/Err.html", "kind" : "case class"}, {"name" : "com.frank.result.Ok", "shortDescription" : "", "members_case class" : [{"label" : "iterator", "tail" : "(): Iterator[T]", "member" : "com.frank.result.Ok.iterator", "link" : "com\/frank\/result\/Ok.html#iterator():Iterator[T]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[T]", "member" : "com.frank.result.Ok.toSeq", "link" : "com\/frank\/result\/Ok.html#toSeq:Seq[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) => Unit): Unit", "member" : "com.frank.result.Ok.foreach", "link" : "com\/frank\/result\/Ok.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (T) => Boolean): Boolean", "member" : "com.frank.result.Ok.exists", "link" : "com\/frank\/result\/Ok.html#exists(f:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) => U): Result[U, E]", "member" : "com.frank.result.Ok.map", "link" : "com\/frank\/result\/Ok.html#map[U](f:T=>U):com.frank.result.Result[U,E]", "kind" : "def"}, {"label" : "TypeOf", "tail" : "", "member" : "com.frank.result.Ok.TypeOf", "link" : "com\/frank\/result\/Ok.html#TypeOf=T", "kind" : "type"}, {"member" : "com.frank.result.Ok#<init>", "error" : "unsupported entity"}, {"label" : "x", "tail" : ": T", "member" : "com.frank.result.Ok.x", "link" : "com\/frank\/result\/Ok.html#x:T", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/frank\/result\/Ok.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "toEither", "tail" : "(): Either[E, T]", "member" : "com.frank.result.Result.toEither", "link" : "com\/frank\/result\/Ok.html#toEither:scala.util.Either[E,T]", "kind" : "def"}, {"label" : "toTry", "tail" : "(): Try[T]", "member" : "com.frank.result.Result.toTry", "link" : "com\/frank\/result\/Ok.html#toTry:scala.util.Try[T]", "kind" : "def"}, {"label" : "creatUnitValue", "tail" : "(): Unit", "member" : "com.frank.result.Result.creatUnitValue", "link" : "com\/frank\/result\/Ok.html#creatUnitValue():Unit", "kind" : "def"}, {"label" : "foreachOrElse", "tail" : "(f: (T) => Unit, default: (E) => Unit): Unit", "member" : "com.frank.result.Result.foreachOrElse", "link" : "com\/frank\/result\/Ok.html#foreachOrElse(f:T=>Unit,default:E=>Unit):Unit", "kind" : "def"}, {"label" : "orElse", "tail" : "(func: (M2) => Result[M1, M2]): Result[M1, M2]", "member" : "com.frank.result.Result.orElse", "link" : "com\/frank\/result\/Ok.html#orElse[M1>:T,M2>:E](func:M2=>com.frank.result.Result[M1,M2]):com.frank.result.Result[M1,M2]", "kind" : "def"}, {"label" : "or", "tail" : "(result: Result[M1, M2]): Result[M1, M2]", "member" : "com.frank.result.Result.or", "link" : "com\/frank\/result\/Ok.html#or[M1>:T,M2>:E](result:com.frank.result.Result[M1,M2]):com.frank.result.Result[M1,M2]", "kind" : "def"}, {"label" : "mapOrElse", "tail" : "(f: (T) => U, default: (E) => U): Result[U, U]", "member" : "com.frank.result.Result.mapOrElse", "link" : "com\/frank\/result\/Ok.html#mapOrElse[U](f:T=>U,default:E=>U):com.frank.result.Result[U,U]", "kind" : "def"}, {"label" : "flatten", "tail" : "(f: (T) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatten", "link" : "com\/frank\/result\/Ok.html#flatten[M>:T](implicitf:T=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "flatMapOrElse", "tail" : "(f: (T) => IterableOnce[M], e: (E) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatMapOrElse", "link" : "com\/frank\/result\/Ok.html#flatMapOrElse[M>:T,ME>:E](f:T=>IterableOnce[M],e:E=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatMap", "link" : "com\/frank\/result\/Ok.html#flatMap[M>:T,U](f:T=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "mapErr", "tail" : "(f: (E) => U): Result[T, U]", "member" : "com.frank.result.Result.mapErr", "link" : "com\/frank\/result\/Ok.html#mapErr[U](f:E=>U):com.frank.result.Result[T,U]", "kind" : "def"}, {"label" : "ok", "tail" : "(): Option[T]", "member" : "com.frank.result.Result.ok", "link" : "com\/frank\/result\/Ok.html#ok:Option[T]", "kind" : "def"}, {"label" : "okOrElse", "tail" : "(elseValue: M): M", "member" : "com.frank.result.Result.okOrElse", "link" : "com\/frank\/result\/Ok.html#okOrElse[M>:T](elseValue:M):M", "kind" : "def"}, {"label" : "unwrapOrElse", "tail" : "(e: (M2) => M1): M1", "member" : "com.frank.result.Result.unwrapOrElse", "link" : "com\/frank\/result\/Ok.html#unwrapOrElse[M1>:T,M2>:E](e:M2=>M1):M1", "kind" : "def"}, {"label" : "unwrapOrDefault", "tail" : "(default: M): M", "member" : "com.frank.result.Result.unwrapOrDefault", "link" : "com\/frank\/result\/Ok.html#unwrapOrDefault[M>:T](default:M):M", "kind" : "def"}, {"label" : "unwrapErr", "tail" : "(): E", "member" : "com.frank.result.Result.unwrapErr", "link" : "com\/frank\/result\/Ok.html#unwrapErr:E", "kind" : "def"}, {"label" : "unwrap", "tail" : "(): T", "member" : "com.frank.result.Result.unwrap", "link" : "com\/frank\/result\/Ok.html#unwrap:T", "kind" : "def"}, {"label" : "exceptionErr", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exceptionErr", "link" : "com\/frank\/result\/Ok.html#exceptionErr(msg:String):Unit", "kind" : "def"}, {"label" : "exception", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exception", "link" : "com\/frank\/result\/Ok.html#exception(msg:String):Unit", "kind" : "def"}, {"label" : "err", "tail" : "(): Option[E]", "member" : "com.frank.result.Result.err", "link" : "com\/frank\/result\/Ok.html#err:Option[E]", "kind" : "def"}, {"label" : "isErr", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isErr", "link" : "com\/frank\/result\/Ok.html#isErr:Boolean", "kind" : "def"}, {"label" : "containsErr", "tail" : "(x: M): Boolean", "member" : "com.frank.result.Result.containsErr", "link" : "com\/frank\/result\/Ok.html#containsErr[M>:T](x:M):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(i: M): Boolean", "member" : "com.frank.result.Result.contains", "link" : "com\/frank\/result\/Ok.html#contains[M>:T](i:M):Boolean", "kind" : "def"}, {"label" : "isOK", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isOK", "link" : "com\/frank\/result\/Ok.html#isOK:Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/frank\/result\/Ok.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/frank\/result\/Ok.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/frank\/result\/Ok.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/frank\/result\/Ok.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/frank\/result\/Ok.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/frank\/result\/Ok.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/frank\/result\/Ok.html", "kind" : "case class"}, {"name" : "com.frank.result.Result", "object" : "com\/frank\/result\/Result$.html", "members_object" : [{"label" : "result2Either", "tail" : "(x: Result[A, B]): Either[B, A]", "member" : "com.frank.result.Result.result2Either", "link" : "com\/frank\/result\/Result$.html#result2Either[A,B](x:com.frank.result.Result[A,B]):scala.util.Either[B,A]", "kind" : "implicit def"}, {"label" : "either2Result", "tail" : "(x: Either[B, A]): Result[A, B]", "member" : "com.frank.result.Result.either2Result", "link" : "com\/frank\/result\/Result$.html#either2Result[A,B](x:scala.util.Either[B,A]):com.frank.result.Result[A,B]", "kind" : "implicit def"}, {"label" : "fromEither", "tail" : "(x: Either[B, A]): Result[A, B]", "member" : "com.frank.result.Result.fromEither", "link" : "com\/frank\/result\/Result$.html#fromEither[A,B](x:scala.util.Either[B,A]):com.frank.result.Result[A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/frank\/result\/Result$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/frank\/result\/Result$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/frank\/result\/Result$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/frank\/result\/Result$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/frank\/result\/Result$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/frank\/result\/Result$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/frank\/result\/Result$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/frank\/result\/Result$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/frank\/result\/Result$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/frank\/result\/Result$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/frank\/result\/Result$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/frank\/result\/Result$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/frank\/result\/Result$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/frank\/result\/Result$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/frank\/result\/Result$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/frank\/result\/Result$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/frank\/result\/Result$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/frank\/result\/Result$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/frank\/result\/Result$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/frank\/result\/Result.html", "kind" : "trait", "members_trait" : [{"label" : "toEither", "tail" : "(): Either[E, T]", "member" : "com.frank.result.Result.toEither", "link" : "com\/frank\/result\/Result.html#toEither:scala.util.Either[E,T]", "kind" : "def"}, {"label" : "toTry", "tail" : "(): Try[T]", "member" : "com.frank.result.Result.toTry", "link" : "com\/frank\/result\/Result.html#toTry:scala.util.Try[T]", "kind" : "def"}, {"label" : "creatUnitValue", "tail" : "(): Unit", "member" : "com.frank.result.Result.creatUnitValue", "link" : "com\/frank\/result\/Result.html#creatUnitValue():Unit", "kind" : "def"}, {"label" : "foreachOrElse", "tail" : "(f: (T) => Unit, default: (E) => Unit): Unit", "member" : "com.frank.result.Result.foreachOrElse", "link" : "com\/frank\/result\/Result.html#foreachOrElse(f:T=>Unit,default:E=>Unit):Unit", "kind" : "def"}, {"label" : "orElse", "tail" : "(func: (M2) => Result[M1, M2]): Result[M1, M2]", "member" : "com.frank.result.Result.orElse", "link" : "com\/frank\/result\/Result.html#orElse[M1>:T,M2>:E](func:M2=>com.frank.result.Result[M1,M2]):com.frank.result.Result[M1,M2]", "kind" : "def"}, {"label" : "or", "tail" : "(result: Result[M1, M2]): Result[M1, M2]", "member" : "com.frank.result.Result.or", "link" : "com\/frank\/result\/Result.html#or[M1>:T,M2>:E](result:com.frank.result.Result[M1,M2]):com.frank.result.Result[M1,M2]", "kind" : "def"}, {"label" : "mapOrElse", "tail" : "(f: (T) => U, default: (E) => U): Result[U, U]", "member" : "com.frank.result.Result.mapOrElse", "link" : "com\/frank\/result\/Result.html#mapOrElse[U](f:T=>U,default:E=>U):com.frank.result.Result[U,U]", "kind" : "def"}, {"label" : "flatten", "tail" : "(f: (T) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatten", "link" : "com\/frank\/result\/Result.html#flatten[M>:T](implicitf:T=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "flatMapOrElse", "tail" : "(f: (T) => IterableOnce[M], e: (E) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatMapOrElse", "link" : "com\/frank\/result\/Result.html#flatMapOrElse[M>:T,ME>:E](f:T=>IterableOnce[M],e:E=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => IterableOnce[M]): Seq[M]", "member" : "com.frank.result.Result.flatMap", "link" : "com\/frank\/result\/Result.html#flatMap[M>:T,U](f:T=>IterableOnce[M]):Seq[M]", "kind" : "def"}, {"label" : "mapErr", "tail" : "(f: (E) => U): Result[T, U]", "member" : "com.frank.result.Result.mapErr", "link" : "com\/frank\/result\/Result.html#mapErr[U](f:E=>U):com.frank.result.Result[T,U]", "kind" : "def"}, {"label" : "ok", "tail" : "(): Option[T]", "member" : "com.frank.result.Result.ok", "link" : "com\/frank\/result\/Result.html#ok:Option[T]", "kind" : "def"}, {"label" : "okOrElse", "tail" : "(elseValue: M): M", "member" : "com.frank.result.Result.okOrElse", "link" : "com\/frank\/result\/Result.html#okOrElse[M>:T](elseValue:M):M", "kind" : "def"}, {"label" : "unwrapOrElse", "tail" : "(e: (M2) => M1): M1", "member" : "com.frank.result.Result.unwrapOrElse", "link" : "com\/frank\/result\/Result.html#unwrapOrElse[M1>:T,M2>:E](e:M2=>M1):M1", "kind" : "def"}, {"label" : "unwrapOrDefault", "tail" : "(default: M): M", "member" : "com.frank.result.Result.unwrapOrDefault", "link" : "com\/frank\/result\/Result.html#unwrapOrDefault[M>:T](default:M):M", "kind" : "def"}, {"label" : "unwrapErr", "tail" : "(): E", "member" : "com.frank.result.Result.unwrapErr", "link" : "com\/frank\/result\/Result.html#unwrapErr:E", "kind" : "def"}, {"label" : "unwrap", "tail" : "(): T", "member" : "com.frank.result.Result.unwrap", "link" : "com\/frank\/result\/Result.html#unwrap:T", "kind" : "def"}, {"label" : "exceptionErr", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exceptionErr", "link" : "com\/frank\/result\/Result.html#exceptionErr(msg:String):Unit", "kind" : "def"}, {"label" : "exception", "tail" : "(msg: String): Unit", "member" : "com.frank.result.Result.exception", "link" : "com\/frank\/result\/Result.html#exception(msg:String):Unit", "kind" : "def"}, {"label" : "err", "tail" : "(): Option[E]", "member" : "com.frank.result.Result.err", "link" : "com\/frank\/result\/Result.html#err:Option[E]", "kind" : "def"}, {"label" : "isErr", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isErr", "link" : "com\/frank\/result\/Result.html#isErr:Boolean", "kind" : "def"}, {"label" : "containsErr", "tail" : "(x: M): Boolean", "member" : "com.frank.result.Result.containsErr", "link" : "com\/frank\/result\/Result.html#containsErr[M>:T](x:M):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(i: M): Boolean", "member" : "com.frank.result.Result.contains", "link" : "com\/frank\/result\/Result.html#contains[M>:T](i:M):Boolean", "kind" : "def"}, {"label" : "isOK", "tail" : "(): Boolean", "member" : "com.frank.result.Result.isOK", "link" : "com\/frank\/result\/Result.html#isOK:Boolean", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/frank\/result\/Result.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/frank\/result\/Result.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/frank\/result\/Result.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "com\/frank\/result\/Result.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "com\/frank\/result\/Result.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "com\/frank\/result\/Result.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/frank\/result\/Result.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/frank\/result\/Result.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toSeq", "tail" : "(): Seq[T]", "member" : "com.frank.result.Result.toSeq", "link" : "com\/frank\/result\/Result.html#toSeq:Seq[T]", "kind" : "abstract def"}, {"label" : "foreach", "tail" : "(f: (T) => Unit): Unit", "member" : "com.frank.result.Result.foreach", "link" : "com\/frank\/result\/Result.html#foreach(f:T=>Unit):Unit", "kind" : "abstract def"}, {"label" : "exists", "tail" : "(f: (TypeOf) => Boolean): Boolean", "member" : "com.frank.result.Result.exists", "link" : "com\/frank\/result\/Result.html#exists(f:Result.this.TypeOf=>Boolean):Boolean", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (T) => U): Result[U, E]", "member" : "com.frank.result.Result.map", "link" : "com\/frank\/result\/Result.html#map[U](f:T=>U):com.frank.result.Result[U,E]", "kind" : "abstract def"}, {"label" : "iterator", "tail" : "(): Iterator[TypeOf]", "member" : "com.frank.result.Result.iterator", "link" : "com\/frank\/result\/Result.html#iterator():Iterator[Result.this.TypeOf]", "kind" : "abstract def"}, {"member" : "com.frank.result.Result.TypeOf", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "com\/frank\/result\/Result.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "一个为scala.util.Either提供了更多特性的库"}]};